// Code generated by MockGen. DO NOT EDIT.
// Source: golang-route-app/repos (interfaces: LocationRepos)

// Package repos is a generated GoMock package.
package repos

import (
	models "golang-route-app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockLocationRepos is a mock of LocationRepos interface.
type MockLocationRepos struct {
	ctrl     *gomock.Controller
	recorder *MockLocationReposMockRecorder
}

// MockLocationReposMockRecorder is the mock recorder for MockLocationRepos.
type MockLocationReposMockRecorder struct {
	mock *MockLocationRepos
}

// NewMockLocationRepos creates a new mock instance.
func NewMockLocationRepos(ctrl *gomock.Controller) *MockLocationRepos {
	mock := &MockLocationRepos{ctrl: ctrl}
	mock.recorder = &MockLocationReposMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepos) EXPECT() *MockLocationReposMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockLocationRepos) Delete(arg0 primitive.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockLocationReposMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLocationRepos)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockLocationRepos) GetAll() ([]models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLocationReposMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLocationRepos)(nil).GetAll))
}

// GetByNameWithData mocks base method.
func (m *MockLocationRepos) GetByNameWithData(arg0 primitive.ObjectID) ([]models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameWithData", arg0)
	ret0, _ := ret[0].([]models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameWithData indicates an expected call of GetByNameWithData.
func (mr *MockLocationReposMockRecorder) GetByNameWithData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameWithData", reflect.TypeOf((*MockLocationRepos)(nil).GetByNameWithData), arg0)
}

// Insert mocks base method.
func (m *MockLocationRepos) Insert(arg0 models.Location) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockLocationReposMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLocationRepos)(nil).Insert), arg0)
}

// Routing mocks base method.
func (m *MockLocationRepos) Routing(arg0 models.Location) ([]primitive.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routing", arg0)
	ret0, _ := ret[0].([]primitive.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Routing indicates an expected call of Routing.
func (mr *MockLocationReposMockRecorder) Routing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routing", reflect.TypeOf((*MockLocationRepos)(nil).Routing), arg0)
}

// UpdateByID mocks base method.
func (m *MockLocationRepos) UpdateByID(arg0 models.Location) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockLocationReposMockRecorder) UpdateByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockLocationRepos)(nil).UpdateByID), arg0)
}
